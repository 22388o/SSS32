%!PS-Adobe-3.0
%%Orientation: Portrait
%%Pages: 20
%%EndComments
%%BeginSetup
(SSS32)
(revision alpha-4.2)
[
(MIT License)
()
(Copyright (c) 2020 Blockstream)
()
(Permission is hereby granted, free of charge, to any person obtaining a copy)
(of this software and associated documentation files (the "Software"), to deal)
(in the Software without restriction, including without limitation the rights)
(to use, copy, modify, merge, publish, distribute, sublicense, and/or sell)
(copies of the Software, and to permit persons to whom the Software is)
(furnished to do so, subject to the following conditions:)
()
(The above copyright notice and this permission notice shall be included in all)
(copies or substantial portions of the Software.)
()
(THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR)
(IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)
(FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE)
(AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER)
(LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)
(OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE)
(SOFTWARE.)
]
[
(WARNING: Seriously, this is a work in progress, and it is only a concept right now.)
(If you try to use this for your valuable data, I promise you will lose your data.)
(You will lose this document and come back here only to find that I have made incompatible changes,)
(and your data is lost forever. Even if you don't lose this document, there is no warranty or)
(guarantee of any kind that you will be able to recover successfully recover your data.)
()
(MATERIALS: Scissors, X-Acto knife, brass fasteners)
()
(CONSTRUCTION:)
(The bottom discs are the discs with a small circle in the center of them.)
(The top discs are the discs with a small cross in the centre. All the top discs are identical. Cut out each disc.)
(Cut out the small centre circle in each the bottom discs. Cut out each of the 32 squares of each top disc.)
(Cut a slit along one one of the small lines of the cross in each of the top discs.)
(Pass the brass fastener through a top disc and bottom disc.)
(Fold the legs of the fastener apart to secure the top and bottom discs together.)
(The two discs should now be able to rotate about their common centre.)
(Note: the "Make Share" discs are experimental and are not needed if you will be using the lookup tables.)
()
(CREATING SHARES:)
(How to construct a 2-of-n (Shamir's) Secret Sharing Scheme for splitting secret data encoded in the Bech32 alphabet.)
(For this document n cannot exceed 31.)
(It is strongly advised that the secret data contain a strong error correcting code to allow robust recovery.)
(Write out the secret share.  We will name this the S share.)
(Generate a random share of the same length.  We will name this the A share. To generate a random character)
(you can use 1d8 and 1d4 or use two distinct d6s and look up a character from the dice tables.)
(If you use d6s, you will have to re-roll if the entry is blank.)
(To generate other shares, turn to the table on the page of the first letter of your S share.)
(Find the row that corresponds to the first letter of your A share.)
(The first column tells you the first letter of the C share; the second column tells you the first letter of the D share.)
(Use as many columns as shares you need.)
(Repeat this process for every pair of letters of from your A and S shares.)
(Securely store your A share, C share, D share, and so forth, labeling the shares with their share name.)
(Securely dispose your S share and worksheets.)
()
(SECRET RECOVERY:)
(Find 2 of your secured shares.)
(Find the pair of the share names you have in the Recovery Table to find their two associated recovery symbols.)
(Translate each share, character by character, by setting the Recovery disc's dial to the associated symbol found above.)
(Add the two translated shares, character by character, using the Addition disc. The result is your secret share S.)
]
/README exch def
/MIT exch def
/ver exch def
/name exch def

/pgsize {612 792} def % letter size
/code (QPZRY9X8GF2TVDW0S3JN54KHCE6MUA7L ) def
/code2 (cj\245y*q\252hxnav\250l\251\300wbpudgrokmet\247izs ) def
% /code2 (\300abcdefghijklmnopqrstuvwxyz\247\250\251\252\245) def
/perm [29 24 13 25 9 8 23 18 22 31 27 19 1 0 3 16 11 28 12 14 6 4 2 15 10 17 21 20 26 30 7 5 ] def
/permS [16 29 24 13 25 9 8 23 18 22 31 27 19 1 0 3 11 28 12 14 6 4 2 15 10 17 21 20 26 30 7 5 ] def
/permV [22 11 10 29 31 28 17 24 27 12 21 13 19 14 20 25 1 6 26 9 0 4 30 8 3 2 7 23 16 15 5 18 ] def
% Generator for GF(32) is alpha^5 = alpha^3 + 1

/gf32add % x y -> x [+] y where [+] is addition in GF32.
         % returns 32 if x or y is out of range.
         % Note that x [+] y = x [-] y in GF32.
{               % x y
 2 copy 32 ge   % x y x (y >= 32)
 exch 32 ge or  % x y (y >= 32 || x >= 32)
 {pop pop 32}     % 32
 {xor}            % x [+] y
 ifelse         % if (y >= 32 || x >= 32) then 32 else (x [+] y)
} bind def

/gf32mulalpha % x -> x [*] alpha where [*] is multiplicaiton in GF32 and alpha is represted by 0b00010.
{               % x
 2 mul          % 2*x
 dup 32 ge      % 2*x (2*x >= 0b100000)
 { 41 xor }       % 2*x `xor` 0b101001
 if             % if (2*x >= 0xb100000) then 2*x `xor` 0x0b101001 else 2*x
} bind def

/gf32mul % x y -> x [*] y where [*] is multiplication in GF32.
         % returns 32 if x or y is out of range.
{                % x y
 10 dict begin
 { /y /x } {exch def} forall
 x 32 ge y 32 ge or  % (y >= 32 || x >= 32)
 {32}                  % 32
 {
   /xShift x def
   /yAlpha y def
   0                   % 0
   5 {                                % ((x & 0b001..1) [*] y) (x >> i) (y [*] alpha[^i])
     xShift 1 and yAlpha mul xor      % ((x & 0b001..1) [*] y [+] ((x >> i) & 1) * (y [*] alpha [^i]))
     /xShift xShift -1 bitshift def
     /yAlpha yAlpha gf32mulalpha def
   } repeat            % ((x & 0b11111) [*] y)
 } ifelse            % if (y >= 32 || x >= 32) then 32 else (x [*] y)
 end
} bind def

/gf32inv % x -> x [^-1] where [^-1] is the inverse operation in GF32.
         % returns 0 when given 0.
         % returns 32 if x is out of range.
{                        % x
 dup dup gf32mul         % x x[^2]
 dup gf32mul gf32mul     % x[^5]
 dup dup gf32mul gf32mul % x[^15]
 dup gf32mul             % x[^30]
                         % x[^-1]
} bind def

/lagrange % x xj [x[0] .. x[k]] -> l[j](x)
          % returns the lagrange basis polynomial l[j] evaluated at x for interpolation of coordinates [x[0] .. x[k]].
          % Requires xj `elem` [x[0] ... x[k]]
{               % x xj [x[0] .. x[k]]
 10 dict begin
 { /xs /xj /x } {exch def} forall
 1 xs           % 1 [x[0] .. x[k]]
 {                % let P = product [(x [-] x[m]) [/] (xj [-] x[m]) | m <- [0..i-1], x[m] /= xj]
                  % P x[i]
   /xi exch def   % P
   xi xj xor      % P (xj [-] x[i])
   dup 0 eq       % P (xj [-] x[i]) (xj [-] x[i] == 0)
   { pop }             % P
   { gf32inv gf32mul   % (P [/] (xj [-] x[i])
     xi x xor gf32mul  % (P [*] (x [-] x[i]) [/] (xj [-] x[i]))
   }
   ifelse         % (if xj == x[i] then P else (P [*] (x [-] x[i]) [/] (xj [-] x[i]))
 } forall       % x xj (product [(x [-] x[m]) [/] (xj [-] x[m]) | m <- [0..k], x[m] /= xj])
 end
} bind def

/makeShare % sS sA i -> si
       { 3 2 roll 1 index permS 0 get permS 0 2 getinterval lagrange gf32mul
         3 1 roll permS 1 get permS 0 2 getinterval lagrange gf32mul
         xor
       } bind def

/gf32mularray % x b -> x * b
  { [ 3 1 roll { 1 index gf32mul exch } forall pop ]
  } bind def

/gf32addarray % a b -> a + b pointwise
  { [ 3 1 roll 0 1 2 index length 1 sub { 2 index 1 index get 2 index 2 index get gf32add exch pop 3 1 roll } for pop pop ]
  } bind def

/polymodulus [31 5 3 28 0 31 31 31 9 5 30 2 2] def % coefficents from c12 to c0
/checksum [16 25 24 3 25 11 16 23 29 3 25 17 10] def
/checksumstring { polymodulus length string checksum 0 1 polymodulus length 1 sub {3 copy exch 1 index get code exch 1 getinterval putinterval pop } for pop } bind def

/polymod0 % array -> [ c5 c4 c3 c2 c1 c0 ]
 { [ polymodulus length {0} repeat ]
   exch
   { [ exch 2 index 1 polymodulus length 1 sub getinterval aload pop polymodulus length dup 1 sub roll ] exch 0 get polymodulus gf32mularray gf32addarray  } forall
 } bind def

/polymodshift2 % c7 c6 -> [ c5 c4 c3 c2 c1 c0 ]
 {  [ 3 1 roll polymodulus length {0} repeat ] polymod0
 } bind def

/polymodhrp % string -> [ c5 c4 c3 c2 c1 c0 ]
 {
   [ exch 1 exch dup { 32 idiv exch } forall 0 exch { 31 and } forall ] polymod0
 } bind def

/underlineshow {
    dup dup (6) eq exch (9) eq or { % if the string is (6) or (9)
        gsave (_) show grestore % draw an underline
    } if
    show
} bind def
/centreshow {dup stringwidth pop 2 div neg 0 rmoveto underlineshow} bind def
/centresquare {dup neg 2 div dup rmoveto dup 0 rlineto dup 0 exch rlineto neg 0 rlineto closepath stroke} bind def
/concatstrings % (a) (b) -> (ab)
   { exch dup length
     2 index length add string
     dup dup 4 2 roll copy length
     4 -1 roll putinterval
   } bind def

% From BLUEBOOK Program #10
/outsidecircletext
  { circtextdict begin
      /radius exch def
      /centerangle exch def
      /ptsize exch def
      /str exch def
      /xradius radius ptsize 4 div add def

      gsave
        centerangle str findhalfangle add rotate

        str
          { /charcode exch def
            ( ) dup 0 charcode put outsideplacechar
          } forall
      grestore
    end
  } def

/insidecircletext
{ circtextdict begin
  /radius exch def /centerangle exch def
  /ptsize exch def /str exch def
  /xradius radius ptsize 3 div sub def
  gsave
   centerangle str findhalfangle sub rotate
   str
    { /charcode exch def
      ( ) dup 0 charcode put insideplacechar
    } forall
  grestore
  end
} def

/circtextdict 16 dict def
circtextdict begin
 /findhalfangle
  { stringwidth pop 2 div
    2 xradius mul pi mul div 360 mul
  } def

/outsideplacechar
    { /char exch def
      /halfangle char findhalfangle def
      gsave
        halfangle neg rotate
        radius 0 translate
        -90 rotate
        char stringwidth pop 2 div neg 0 moveto
        char show
      grestore
      halfangle 2 mul neg rotate
    } def

/insideplacechar
 { /char exch def
   /halfangle char findhalfangle def
   gsave
    halfangle rotate
    radius 0 translate
    90 rotate
    char stringwidth pop 2 div neg 0 moveto
    char show
   grestore
   halfangle 2 mul rotate
 } def

/pi 3.1415923 def
end

/showBottomWheelPage
 {
   /title exch def
   /binop exch def
   % Move cursor to center of page
   pgsize 2 div exch 2 div exch translate
   % Draw white interior circle
   newpath 0 0 6 40 mul 0 360 arc stroke
   newpath 0 0 6 40 mul 28 add 0 360 arc stroke
   newpath 0 0 6 0 360 arc stroke
   % Draw title (small text, repeated)
   /Helvetica findfont 12 scalefont setfont
   title 12 270 30 insidecircletext
   % Draw letters (using human-centric ABCD... permutation)
   /Helvetica findfont 6 scalefont setfont
   0 30 360 {title 6 2 index 262 outsidecircletext} for
   outerfont findfont 18 scalefont setfont
   perm {0 38 sqrt 40 mul moveto outercode exch 1 getinterval centreshow -11.25 rotate} forall
   % Draw inside contents
   /Courier findfont 12 scalefont setfont
   180 rotate
   0 1 31 { % Draw 32 circles of increasing radius
       94 rotate
       perm {
           0 2 index 2 add sqrt 40 mul moveto % move to 0, 2.5 + 40*sqrt(outer index + 2)
           1 index 31 exch sub % 31 - outer index
           permV exch get binop % apply binary operation to the permuted letter and the inner index
           code exch 1 getinterval centreshow % display the result
           -11.25 rotate % rotate by 1/32nd of a circle
       } forall pop
   } for
   showpage
 } bind def

/showTopWheelPage
 {
   % Move cursor to center of page
   pgsize 2 div exch 2 div exch translate
   % Draw gray "handle" and white interior circle
   0.8 setgray
   newpath 0 0 7.25 40 mul 140 40 arc fill
   1 setgray
   newpath 0 0 6 40 mul 0 360 arc fill
   0 setgray
   newpath 0 0 6 40 mul 0 360 arc stroke
   % Draw centre cross
   newpath 0 6 moveto 0 -6 lineto stroke
   newpath 6 0 moveto -6 0 lineto stroke
   % Draw indicator arrow
   newpath 0 6 40 mul moveto 10 -20 rlineto -20 0 rlineto closepath fill
   % Draw text
   /Courier findfont 12 scalefont setfont
   180 rotate
   0 1 31 {
       94 rotate
       dup 2 add sqrt 40 mul 2.5 add % lam = 2.5 + 40*sqrt(idx + 2)
       newpath
       0 exch % set midpoint: 0 lam
       2 copy moveto
       12 centresquare % draw square
       moveto % return to midpoint
       -26 -3 rmoveto % Move to the left
       31 exch sub % 31 - loop index
       permV exch get code exch 1 getinterval % Permute index and extract 1-char substring of alphabet
       /Courier findfont 12 scalefont setfont underlineshow % ...and draw it
       (\256) /Symbol findfont 12 scalefont setfont show % Draw a right arrow
   } for
   showpage
 } bind def

/showShareTable {
/offsety exch def
/offsetx exch def
/page exch def
/Courier findfont 10 scalefont setfont
20 offsetx add offsety moveto (Page: ) show
/Courier-Bold findfont 8 scalefont setfont
code page 1 getinterval show
2 1 31 {
dup 7 mul offsetx add offsety 10 sub moveto
permS exch get
code exch 1 getinterval show
} for

0 1 31 {
/Courier-Bold findfont 8 scalefont setfont
offsetx offsety 20 sub 2 index 8 mul sub moveto
dup code exch perm exch get 1 getinterval show
/Courier findfont 8 scalefont setfont
2 1 31 {
dup 7 mul offsetx add offsety 20 sub 3 index 8 mul sub moveto
permS exch get
page exch perm 3 index get exch  makeShare code exch 1 getinterval show
} for pop } for
} bind def

/showShareTablePage {
325 400 showShareTable
50 400 showShareTable
325 720 showShareTable
50 720 showShareTable
showpage
} bind def

/arraySpace 13 def
/showArray {
  10 dict begin
  { /word /y /x } {exch def} forall
  word { x y moveto code exch 1 getinterval show
         /x x arraySpace add def
       } forall
  end
} bind def

/showBox {
  10 dict begin
  { /word /y /x /decoration } {exch def} forall
  word length 1 neg 1
    { x y moveto decoration
      /x x arraySpace add def
    } for
  end
} bind def

/showArrayBox {
  4 copy showBox
  showArray pop
} bind def
%%EndSetup

%%Page: 1 1
/Helvetica findfont 6 scalefont setfont
40 750 moveto
MIT {gsave show grestore 0 -8 rmoveto} forall
/Helvetica findfont 20 scalefont setfont
0 -22 rmoveto
gsave name show grestore 0 -12 rmoveto
/Helvetica findfont 10 scalefont setfont
gsave ver show grestore 0 -24 rmoveto
README {gsave show grestore 0 -12 rmoveto} forall
showpage

%%Page: 2 2

%cat <<EOF | tbl | groff -Tps
%Dice Tables
%
%1d4;1d8
%.TS
%box;
%cFCW || cFCW | cFCW | cFCW | cFCW | cFCW | cFCW | cFCW | cFCW.
%        1       2       3       4       5       6       7       8
%=
%1       Q       P       Z       R       Y       9       X       8
%_
%2       G       F       2       T       V       D       W       0
%_
%3       S       3       J       N       5       4       K       H
%_
%4       C       E       6       M       U       A       7       L
%.TE
%
%2d6
%.TS
%box;
%cFCW || cFCW | cFCW | cFCW | cFCW | cFCW | cFCW.
%        1       2       3       4       5       6
%=
%1               Q       P       Z       R
%_
%2       Y       9       X       8       G       F
%_
%3       2       T       V       D       W       0
%_
%4       S       3       J       N       5       4
%_
%5       K       H       C       E       6       M
%_
%6               U       A       7       L
%.TE
%EOF
/SC 32 def
/E{0 rmoveto show}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Cg/setgray load def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/LW/setlinewidth load def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/BP{
1 setlinecap
1 setlinejoin
0 792 translate
1 -1 scale
}bind def
/EP{
showpage
}def
BP

/F0 10/Courier SF(Dice T)72 12 Q(ables)-.8 E(1d4;1d8)72 36 Q .4 LW
256 40.5 72 40.5 DL/F1 10/Courier SF 15(12345678)98 50 S 256 54.5 72
54.5 DL 256 56.5 72 56.5 DL 15(1QPZRY9X8)77 66 S 256 70.5 72 70.5 DL 15
(2GF2TVDW0)77 80 S 256 84.5 72 84.5 DL 15(3S3JN54KH)77 94 S 256 98.5 72
98.5 DL 15(4CE6MUA7L)77 108 S 256 112.5 72 112.5 DL 237.5 40.5 237.5
112.5 DL 216.5 40.5 216.5 112.5 DL 195.5 40.5 195.5 112.5 DL 174.5 40.5
174.5 112.5 DL 153.5 40.5 153.5 112.5 DL 132.5 40.5 132.5 112.5 DL 111.5
40.5 111.5 112.5 DL 89.5 40.5 89.5 112.5 DL 91.5 40.5 91.5 112.5 DL 256
40.5 256 112.5 DL 72 40.5 72 112.5 DL F0(2d6)72 132 Q 214 136.5 72 136.5
DL F1 15(123456)98 146 S 214 150.5 72 150.5 DL 214 152.5 72 152.5 DL 36
(1Q)77 162 S 15(PZR)-21 G 214 166.5 72 166.5 DL 15(2Y9X8GF)77 176 S 214
180.5 72 180.5 DL 15(32TVDW0)77 190 S 214 194.5 72 194.5 DL 15(4S3JN54)
77 204 S 214 208.5 72 208.5 DL 15(5KHCE6M)77 218 S 214 222.5 72 222.5 DL
36(6U)77 232 S 15(A7L)-21 G 214 236.5 72 236.5 DL 195.5 136.5 195.5
236.5 DL 174.5 136.5 174.5 236.5 DL 153.5 136.5 153.5 236.5 DL 132.5
136.5 132.5 236.5 DL 111.5 136.5 111.5 236.5 DL 89.5 136.5 89.5 236.5 DL
91.5 136.5 91.5 236.5 DL 214 136.5 214 236.5 DL 72 136.5 72 236.5 DL

/row12 code2 0 1 [1 2] lagrange 1 getinterval code2 0 2 [1 2] lagrange 1 getinterval concatstrings def
/row13 code2 0 1 [1 3] lagrange 1 getinterval code2 0 3 [1 3] lagrange 1 getinterval concatstrings def
/row23 code2 0 2 [2 3] lagrange 1 getinterval code2 0 3 [2 3] lagrange 1 getinterval concatstrings def

(Recovery Table) 29 256 Q
2 1 31 { 1 1 2 index 1 sub { 1 index exch
dup 19 mul 10 add 2 index 12 mul 244 add moveto
/F0 5/Courier SF
code 2 index permS exch get 1 getinterval code 2 index permS exch get 1 getinterval concatstrings (:) concatstrings show
dup 19 mul 10 9 add add 2 index 12 mul 244 add moveto
permS exch get exch permS exch get exch
/F0 5/Symbol SF
[ 3 1 roll ] dup permS 0 get exch dup 0 get exch lagrange code2 exch 1 getinterval ( ) exch concatstrings
            exch permS 0 get exch dup 1 get exch lagrange code2 exch 1 getinterval concatstrings show
} for pop } for

0 Cg EP

%%Page: 3 3
% note 0 and 1 (aka chi and phi) are never used, so they could be removed from the wheel, freeing up character space.
/outerfont /Symbol def
/outercode code2 def
{gf32mul} (Recovery Disc) showBottomWheelPage

%%Page: 4 4
/outerfont /Courier def
/outercode code def
{xor} (Addition) showBottomWheelPage

%%Page: 5 5
29 24 13 25 showShareTablePage

%%Page: 6 6
9 8 23 18 showShareTablePage

%%Page: 7 7
22 31 27 19 showShareTablePage

%%Page: 8 8
1 0 3 16 showShareTablePage

%%Page: 9 9
11 28 12 14 showShareTablePage

%%Page: 10 10
6 4 2 15 showShareTablePage

%%Page: 11 11
10 17 21 20 showShareTablePage

%%Page: 12 12
26 30 7 5 showShareTablePage

%%Page: 13 13
/outerfont /Courier def
/outercode code def
{24 makeShare} (Make Share ) code 24 1 getinterval concatstrings showBottomWheelPage

%%Page: 14 14
/outerfont /Courier def
/outercode code def
{13 makeShare} (Make Share ) code 13 1 getinterval concatstrings showBottomWheelPage

%%Page: 15 15
showTopWheelPage

%%Page: 16 16
showTopWheelPage

%%Page: 17 17
showTopWheelPage

%%Page: 18 18
showTopWheelPage

%%Page: 19 19
/Helvetica-bold findfont 10 scalefont setfont
pgsize 40 sub exch 2 div exch
moveto (ms32 Checksum Table) centreshow

0 1 31 {
0 1 31 {
2 copy 730 exch 7 mul sub 1 index 11 idiv 240 mul sub exch 11 mod 50 mul 30 add exch moveto
2 copy
perm exch get exch perm exch get exch
2 copy
code exch get exch code exch get exch
2 string dup 1 4 3 roll put dup 0 4 3 roll put
/Courier-Bold findfont polymodulus length 6 le {8} {4.5} ifelse scalefont setfont
show
3 0 rmoveto
polymodulus length string
3 1 roll
polymodshift2 0 1 polymodulus length 1 sub { 3 copy get code exch get 3 2 roll exch put } for
pop
/Courier findfont polymodulus length 6 le {8} {4.5} ifelse scalefont setfont
show
pop
} for
pop
} for
showpage

%%Page: 20 20
%%PageOrientation: Landscape
90 rotate 0 -750 translate
/hrp (ms) def
/box { -1.2 -1.9 rmoveto
       0 14 rlineto
       arraySpace 0 rlineto
       0 -14 rlineto
       closepath
       setlinewidth
       le { gsave 1 0.9 0.9 setrgbcolor fill grestore } if
       stroke
     } bind def
/thick 1 def
/thin 0.2 def
/Helvetica-Bold findfont 10 scalefont setfont
pgsize exch pop 2 div 700
moveto (ms32 Checksum Worksheet) centreshow

/Courier findfont 17 scalefont setfont

120 670
% [10 29 19 13 4 16 20 8 16 7 4 13 6 8 27 31 28 14 17 21 31 25 19 15 1 3 13 29 22 5 8 31 9 17 15 30 19 15 21 16 19 26 16 22 31]
[ 45 {32} repeat ]
10 dict begin
{ /codeword /y /x } {exch def} forall
/odd polymodulus length codeword length add 2 mod def
/n polymodulus length odd sub def
  {0 thick box} x arraySpace odd mul add y codeword 0 n getinterval showArrayBox
/y y 14 sub def
/reduction [hrp polymodhrp aload pop n {0} repeat ] polymod0 def
  {0 thin box} x arraySpace odd mul add y reduction odd n getinterval showArrayBox
/y y 15 sub def
/residue reduction [1 odd eq {0} if codeword 0 n getinterval aload pop ] gf32addarray def

{
n codeword length ge {exit} if
  {n polymodulus length add codeword length sub thin box} x y residue showArrayBox
  {n 2 add polymodulus length add codeword length sub thick box} x arraySpace polymodulus length mul add y codeword n 2 getinterval showArrayBox
  /x x arraySpace 2 mul add def
  /y y 14 sub def
  /reduction residue 0 2 getinterval aload pop polymodshift2 def
  {0 thin box} x y reduction showArrayBox
  /y y 15 sub def
  /residue reduction [residue 2 polymodulus length 2 sub getinterval aload pop codeword n 2 getinterval aload pop] gf32addarray def
  /n n 2 add def
} loop

gsave 0.85 setgray x y checksum showArray grestore
{0 thin box} x y residue showArrayBox


end

100 420 moveto
/Helvetica-bold findfont 10 scalefont setfont
(Verifying Checksums) show
100 400 moveto
/Helvetica findfont 9 scalefont setfont
(Write out the 45 character data portion in the) show
100 390 moveto
(bold boxes, two at a time, starting on the top) show
100 380 moveto
(row.  Working from the top row down, look up) show
100 370 moveto
(the first two characters of each odd row in the) show
100 360 moveto
(ms32 Checksum Table and write the ) polymodulus length 10 string cvs concatstrings show
100 350 moveto
(character word into the even row below it.  Fill) show
100 340 moveto
(in the odd rows by adding the two characters) show
100 330 moveto
(above each cell.  You may use either the) show
100 320 moveto
(addition wheel table.  The first few boxes are) show
100 310 moveto
(already filled in for you.  The last row will sum) show
100 300 moveto
(to ) checksumstring ( if the checksum is valid.) concatstrings concatstrings show
100 260 moveto
/Helvetica-bold findfont 10 scalefont setfont
(Creating Checksums) show
100 240 moveto
/Helvetica findfont 9 scalefont setfont
(Follow the "Verifying Checksums" instructions) show
100 230 moveto
(to fill in everything but the shaded cells. To fill in) show
100 220 moveto
(the shaded cells, write ) checksumstring ( into the bottom) concatstrings concatstrings show
100 210 moveto
(row.  Working from the bottom up, fill in the) show
100 200 moveto
(shaded cells by adding the two characters below) show
100 190 moveto
(each cell.  The ) polymodulus length 10 string cvs ( characters in the bold shaded) concatstrings concatstrings show
100 180 moveto
(boxes will be the checksum.) show

450 650
/offsety exch def
/offsetx exch def
/Courier findfont 10 scalefont setfont
20 offsetx add offsety moveto (Addition Table) show
/Courier-Bold findfont 8 scalefont setfont
0 1 31 {
dup 2 add 7 mul offsetx add offsety 10 sub moveto
perm exch get
code exch 1 getinterval show
} for

0 1 31 {
/Courier-Bold findfont 8 scalefont setfont
offsetx 34.5 7 mul add offsety 20 sub 2 index 8 mul sub moveto
dup code exch perm exch get 1 getinterval show
/Courier findfont 8 scalefont setfont
dup 1 31 {
dup 2 add 7 mul offsetx add offsety 20 sub 3 index 8 mul sub moveto
perm exch get
perm 2 index get gf32add code exch 1 getinterval show
} for pop } for
showpage
%%EOF
